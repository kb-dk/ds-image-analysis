openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: |
    Image Analysis provides analytical tools for our image collections at KB. The endpoints of this API are grouped by categories. The primary category is color analysis.

    **Color Analysis**
    
    The endpoints in this category all relates to working with colors of images. In this context it is usefull to have an understanding of some color theory. 
    The first part to consider is how we understand colors. The most common way of understanding colors is as RGB colors where colors are understood as a mixture of red, green and blue colors with values ranging from 0-255.
    Then by combining different values of red, green and blue it is posible to create more than 16 million different colors. It is also posible to understand colors perceptually. Perceptual colorspaces are based on the human experience of of colors and not on the mixture of different color components.

    This API contains two endpoints that can recognize colors in images. One of these endpoints works in the RGB colorspace while the other works in the perceptual colorspace OKlab.
    OKlab is a colorspace that understand color in a perceptual manner, but makes it posible to analyse colors computationaly in a fairly easy way.

    When analysing colors of images we are making many analytical choices. One of the most important questions relate to which colors we compare the images to. Our methods use a palette of 256 colors.
    This palette has been created by the National Gallery of Denmark. 
    To check which color in the palette the pixels of the image looks like the most, we can use different approches. The endpoint *main-rgb-color* calculates the euclidian distance between pixel color and palette colors,
    and then categorises the color of each pixel this way. The *main-OKlab-colors* calculates CIEDE2000 deltaE between each pixel and palette colors. This calculation is a more accurate meassurement of percived colors.    

  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '/${project.artifactId}/v1'
    description: 'Version 1'

paths:
  # These endpoints has been created from the colorizer endpoint-template
  # TODO: Add better descriptions for paths working with extracting colors
  /main-rgb-color:
    post:
      tags:
        - 'Color Analysis'
      summary: 'Get the most dominant color from an image. Calculated in RGB space with euclidian distance.'
      operationId: getMainRgbColor
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                # The POSTed image can be retrieved using imageDetail.getDataHandler().getInputStream()
                image:
                  description: 'The image to analyse'
                  type: string
                  format: binary
      responses:
        '200':
          description: 'The dominant color'
          content:
            text/plain:
              schema:
                type: string
                example: "#000000"

  /main-OKlab-colors:
    post:
      tags:
        - 'Color Analysis'
      summary: 'Get the most dominant colors from an image. Calculated in OKlab colorspace and messured with deltaE.'
      operationId: getMainOkLabColors
      description: |
        This endpoint delivers the top X most used colors in a given image.
        The result is returned RGB hex values but calculations are made in the perceptual OKlab colorspace. 

        For information on OKlab colorspace: [https://bottosson.github.io/posts/oklab/](https://bottosson.github.io/posts/oklab/)

        For information on calculating deltaE: [http://zschuessler.github.io/DeltaE/learn/#toc-defining-delta-e](http://zschuessler.github.io/DeltaE/learn/#toc-defining-delta-e)
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
                - top-colors
              properties:
                # The POSTed image can be retrieved using imageDetail.getDataHandler().getInputStream()
                image:
                  description: 'The image to analyse'
                  type: string
                  format: binary
                top-colors:
                  description: 'Number of colors to return'
                  type: integer
                  format: int32
                  default: 10
      responses:
        '200':
          description: 'The RGB hex value of colors and percentage of image with given color.'
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: object
                  properties:
                    hexRGB:
                      type: string
                    percent:
                      type: number
                      format: float
                example:
                - hexRGB: '#000000'
                  percent: 8.38468
                - hexRGB: '#FFFFFF'
                  percent: 5.23782


  /colorcount:
    post:
      tags: 
        - 'Color Analysis'
      summary: 'Count the unique colors in the given image.'
      operationId: getColorCount
      requestBody:
        content:
          multipart/form-data:
              schema:
                type: object
                required:
                  - image
                properties:
                  # The POSTed image can be retrieved using imageDetail.getDataHandler().getInputStream()
                  image:
                    description: 'The image to analyse'
                    type: string
                    format: binary
      responses:
          '200':
            description: 'Number of unique colors in image:'
            content:
              text/plain:
                schema:
                  type: integer
                  format: int32

  /calculate-color-distance:
    get:
      tags: 
        - 'Color Analysis'
      summary: 'Calculate distance between colors with deltaE to find colors that perceptually look the same in the palette.'
      operationId: calculateColorDistance
      parameters:
      - name: colors
        in: query
        required: true
        description: 'The hex values of colors to analyse'
        schema:
          type: array
          items: 
            type: string
          minimum: 2
      responses:
          '200':
            description: 'Number of unique colors in image:'
            content:
              text/plain:
                schema:
                  type: array
                  items: 
                    type: string

                  
  /greyscale:
    post:
      tags:
        - 'Image Manipulation'
      summary: 'Return image in grayscale'
      operationId: getGreyscale
      requestBody:
        content:
          multipart/form-data:
              schema:
                type: object
                required:
                  - image
                properties:
                  # The POSTed image can be retrieved using imageDetail.getDataHandler().getInputStream()
                  image:
                    description: 'The image to analyse'
                    type: string
                    format: binary
      x-streamingOutput: true
      responses:
        '200':
          description: 'Greyscale version of image.'
          content:
            image/jpeg:
              schema: 
                type: string
                format: binary


  # The ping service should be in all projects, should not do any advanced processing
  # and should respond quickly with a simple message, e.g. "pong".
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the more detailed /monitor/status is defined below.
  /monitor/ping:
    get:
      tags:
        - Service
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

  # The status service should be in all projects and should provide a list of running jobs,
  # the overall health of the service and similar. While the endpoint should be kept at
  # /monitor/status, the response should be adjusted to fit the application.
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the simple /monitor/ping is defined above.
  /monitor/status:
    get:
      tags:
        - Service
      summary: 'Detailed status / health check for the service'
      operationId: status
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

tags:
  - name: Color Analysis
    description: Methods to analyse color in images.
  - name: Image Manipulation
    description: Methods to manipulate images.

components:
  schemas:
    # Basic status response component.
    # TODO: Extend this to provide application specific status, such as a list of running jobs or free disk space
    Status:
      type: object
      required:
        - application
        - version
      properties:
        application:
          type: string
          description: 'The name of the application'
          example: 'MyService'
        version:
          type: string
          description: 'The version of the application'
          example: '1.2.3'
        build:
          type: string
          description: 'When the application was build'
          example: '2022-04-21T13:37:16Z'
        java:
          type: string
          description: 'The Java version that runs the container'
          example: '11.0.11'
        heap:
          type: integer
          format: int64
          description: 'The maximum number of bytes available to the container in megabytes'
          example: '4096'
        server:
          type: string
          description: 'The hostname for the server'
          example: 'miaplacidus'
        health:
          type: string
          description: 'Self diagnosed health'
          example: 'ok'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
