openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: |
    Image Analysis provides analytical tools for our image collections at KB. 
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '/${project.artifactId}/v1'
    description: 'Version 1'

paths:
  # These endpoints has been created from the colorizer endpoint-template
  /maincolor:
    post:
      tags:
        - 'Image Analysis'
      summary: 'Get the most dominant color from an image.'
      operationId: getMainColor

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                # The POSTed image can be retrieved using imageDetail.getDataHandler().getInputStream()
                image:
                  description: 'The image to analyse'
                  type: string
                  format: binary

      responses:
        '200':
          description: 'The dominant color'
          content:
            text/plain:
              schema:
                type: string
                example: "#000000"

  /colorcount:
    post:
      tags: 
        - 'Image Analysis'
      summary: 'Count the unique colors in the given image.'
      operationId: getColorCount
      requestBody:
        content:
          multipart/form-data:
              schema:
                type: object
                required:
                  - image
                properties:
                  # The POSTed image can be retrieved using imageDetail.getDataHandler().getInputStream()
                  image:
                    description: 'The image to analyse'
                    type: string
                    format: binary
      responses:
          '200':
            description: 'Number of unique colors in image:'
            content:
              text/plain:
                schema:
                  type: integer
                  
  /greyscale:
    post:
      tags:
        - 'Image Analysis'
      summary: 'Return image in grayscale'
      operationId: getGreyscale
      requestBody:
        content:
          multipart/form-data:
              schema:
                type: object
                required:
                  - image
                properties:
                  # The POSTed image can be retrieved using imageDetail.getDataHandler().getInputStream()
                  image:
                    description: 'The image to analyse'
                    type: string
                    format: binary
      x-streamingOutput: true

      responses:
        '200':
          description: 'Greyscale version of image.'
          content:
            image/jpeg:
              schema: 
                type: string
                format: binary


  # The ping service should be in all projects, should not do any advanced processing
  # and should respond quickly with a simple message, e.g. "pong".
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the more detailed /monitor/status is defined below.
  /monitor/ping:
    get:
      tags:
        - Service
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

  # The status service should be in all projects and should provide a list of running jobs,
  # the overall health of the service and similar. While the endpoint should be kept at
  # /monitor/status, the response should be adjusted to fit the application.
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the simple /monitor/ping is defined above.
  /monitor/status:
    get:
      tags:
        - Service
      summary: 'Detailed status / health check for the service'
      operationId: status
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string


components:
  schemas:
    # Basic status response component.
    # TODO: Extend this to provide application specific status, such as a list of running jobs or free disk space
    Status:
      type: object
      required:
        - application
        - version
      properties:
        application:
          type: string
          description: 'The name of the application'
          example: 'MyService'
        version:
          type: string
          description: 'The version of the application'
          example: '1.2.3'
        build:
          type: string
          description: 'When the application was build'
          example: '2022-04-21T13:37:16Z'
        java:
          type: string
          description: 'The Java version that runs the container'
          example: '11.0.11'
        heap:
          type: integer
          format: int64
          description: 'The maximum number of bytes available to the container in megabytes'
          example: '4096'
        server:
          type: string
          description: 'The hostname for the server'
          example: 'miaplacidus'
        health:
          type: string
          description: 'Self diagnosed health'
          example: 'ok'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
